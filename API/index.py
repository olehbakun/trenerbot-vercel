import os
import json
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from datetime import time
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –°—Ç–∞–Ω–∏
(META, GENDER, AGE, WEIGHT, HEIGHT, LEVEL, MENU, REMINDER_TIME) = range(8)
user_data = {}
scheduler = AsyncIOScheduler()
scheduler.start()

meta_keyboard = ReplyKeyboardMarkup([["üí™ –ù–∞–±—ñ—Ä –º–∞—Å–∏", "‚öñÔ∏è –°—Ö—É–¥–Ω–µ–Ω–Ω—è", "üéØ –Ü–Ω—à–µ"]], resize_keyboard=True)
gender_keyboard = ReplyKeyboardMarkup([["üë® –Ø —á–æ–ª–æ–≤—ñ–∫", "üë© –Ø –∂—ñ–Ω–∫–∞"]], resize_keyboard=True)
level_keyboard = ReplyKeyboardMarkup([["üìó –ü–æ—á–∞—Ç–∫–æ–≤–∏–π", "üìò –°–µ—Ä–µ–¥–Ω—ñ–π", "üìï –ü—Ä–æ—Å—É–Ω—É—Ç–∏–π"]], resize_keyboard=True)
main_menu_keyboard = ReplyKeyboardMarkup([["üìÖ –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"], ["üß† –Ü–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è"]], resize_keyboard=True)

def get_user_profile(user_id):
    return user_data.get(user_id, {})

def save_user_profile(user_id, key, value):
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id][key] = value

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –û–±–µ—Ä–∏ –º–µ—Ç—É:", reply_markup=meta_keyboard)
    return META

async def set_meta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user_profile(update.effective_user.id, "meta", update.message.text)
    await update.message.reply_text("‚úÖ –ú–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞. –û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:", reply_markup=gender_keyboard)
    return GENDER

async def set_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user_profile(update.effective_user.id, "gender", update.message.text)
    await update.message.reply_text("üéÇ –í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫:")
    return AGE

async def set_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user_profile(update.effective_user.id, "age", update.message.text)
    await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é –≤–∞–≥—É –≤ –∫–≥:")
    return WEIGHT

async def set_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user_profile(update.effective_user.id, "weight", update.message.text)
    await update.message.reply_text("üìè –í–≤–µ–¥–∏ —Å–≤—ñ–π –∑—Ä—ñ—Å—Ç —É —Å–º:")
    return HEIGHT

async def set_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user_profile(update.effective_user.id, "height", update.message.text)
    await update.message.reply_text("üèãÔ∏è‚Äç‚ôÇÔ∏è –û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=level_keyboard)
    return LEVEL

async def set_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user_profile(update.effective_user.id, "level", update.message.text)
    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:", reply_markup=main_menu_keyboard)
    return MENU

async def ask_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 08:00):")
    return REMINDER_TIME

async def set_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    try:
        t = time.fromisoformat(update.message.text.strip())
        scheduler.add_job(
            lambda: context.bot.send_message(chat_id, "üèÉ‚Äç‚ôÇÔ∏è –ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å –∞–±–æ —Ö–∞—Ä—á—É–≤–∞—Ç–∏—Å—å!"),
            trigger='cron', hour=t.hour, minute=t.minute, id=str(user_id), replace_existing=True
        )
        await update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t.strftime('%H:%M')}")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —â–æ—Å—å —Ç–∏–ø—É 09:00")
        return REMINDER_TIME
    return MENU

async def handle_custom_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    profile = get_user_profile(user_id)
    prompt = (
        f"–¢–∏ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Ç–∞–∫—ñ –¥–∞–Ω—ñ:\n"
        f"–≤—ñ–∫: {profile.get('age')}, —Å—Ç–∞—Ç—å: {profile.get('gender')}, "
        f"–≤–∞–≥–∞: {profile.get('weight')} –∫–≥, –∑—Ä—ñ—Å—Ç: {profile.get('height')} —Å–º,\n"
        f"–º–µ—Ç–∞: {profile.get('meta')}, —Ä—ñ–≤–µ–Ω—å: {profile.get('level')}.\n"
        f"–ü–∏—Ç–∞–Ω–Ω—è: {update.message.text}"
    )
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {os.getenv('OPENROUTER')}",
                "Content-Type": "application/json"
            },
            json={
                "model": "meta-llama/llama-3-8b-instruct",
                "messages": [{"role": "user", "content": prompt}]
            }
        )
        result = response.json()
        answer = result["choices"][0]["message"]["content"]
    except Exception as e:
        answer = f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}"
    await update.message.reply_text(answer)
    return MENU

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            META: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_meta)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_height)],
            LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_level)],
            MENU: [
                MessageHandler(filters.Regex(".*–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.*"), ask_reminder_time),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_question)
            ],
            REMINDER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder_time)],
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()

if __name__ == '__main__':
    main()
