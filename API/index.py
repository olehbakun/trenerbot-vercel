import os
import logging
import aiohttp
import asyncio
from fastapi import Request
from fastapi.responses import JSONResponse
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENKEY = os.getenv("OPENROUTER_API_KEY")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# LLaMA —á–µ—Ä–µ–∑ OpenRouter
async def ask_llama(prompt: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENKEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "llama-3",
        "messages": [{"role": "user", "content": prompt}]
    }
    async with aiohttp.ClientSession() as sess:
        async with sess.post(url, json=payload, headers=headers) as resp:
            data = await resp.json()
            return data["choices"][0]["message"]["content"]

# –°—Ç–∞—Ä—Ç-–∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton("üí™ –•–æ—á—É –Ω–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É")], [KeyboardButton("üèÉ –•–æ—á—É —Å—Ö—É–¥–Ω—É—Ç–∏")]]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ü—ñ–ª—å:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_msg(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.message.text
    await update.message.reply_text("–ì–µ–Ω–µ—Ä—É—é —Ç–≤—ñ–π —Ñ—ñ—Ç–Ω–µ—Å –ø–ª–∞–Ω, –∑–∞—á–µ–∫–∞–π‚Ä¶")
    response = await ask_llama(f"–°—Ç–≤–æ—Ä–∏ —Ñ—ñ—Ç–Ω–µ—Å-–ø–ª–∞–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–µ—Ç–æ—é: {user}")
    await update.message.reply_text(response)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±–æ—Ç–∞
async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_msg))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    # –ù–µ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –±–æ—Ç –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
    while True:
        await asyncio.sleep(60)

# Vercel handler
async def handler(request: Request):
    asyncio.create_task(main())
    return JSONResponse(content={"status": "bot started"})
